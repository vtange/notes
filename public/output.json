exports = module.exports = [
    "# arch-design\nshowcase for architecture projects https://arch-design.herokuapp.com/\n\n# Takeaways\n\n[roll-thunder]\n - Vanilla JS loading screen\n ```\n \t// Disable animations/transitions and keep a is-loading circle until everything's loaded.\n\t\t$body.classList.add('is-loading');\n\n\t\twindow.addEventListener('load', function() {\n\t\t\twindow.setTimeout(function() {\n\t\t\t\t$body.classList.remove('is-loading');\n\t\t\t}, 100);\n\t\t});\n\n ```\n - using CSS transitions to animate:\n \n ```\n \tel.style.opacity = 0; //no need for timer, use:\n \t\n \t\t-moz-transition: all 0.25s ease-in-out;\n\t\t-webkit-transition: all 0.25s ease-in-out;\n\t\t-ms-transition: all 0.25s ease-in-out;\n\t\ttransition: all 0.25s ease-in-out;\n ```\n - Vanilla JS 'prependChild'\n \n ```\n \t\t\t\t\t$wrapper.appendChild($bg);\n\t\t\t\t  $body.insertBefore($wrapper, $body.firstChild);  //works like prepend\n ```\n - Vanilla JS Mousewheel events and CSS Transforms\n ```\n if (document.body.addEventListener) {\n\t// IE9, Chrome, Safari, Opera\n\tdocument.body.addEventListener(\"mousewheel\", MouseWheelHandler, false);\n\t// Firefox\n\tdocument.body.addEventListener(\"DOMMouseScroll\", MouseWheelHandler, false);\n}\n function MouseWheelHandler(e, delta) {\n\n\t// cross-browser wheel delta\n\tvar e = window.event || e; // old IE support\n\tvar delta = 0;\n\tif (e.wheelDelta) {\n\t\tdelta = e.wheelDelta/120; \n\t} else if (e.detail) {\n\t\tdelta = -e.detail/3;\n\t}\n\tif (delta)\n\t\thandle(delta);\n        if (e.preventDefault)\n                e.preventDefault();\n        e.returnValue = false;\n\t\n}\n\t\nfunction handle(delta) {\n\tif (delta > 0){\n\t\t\tmiscDivPosition = 0;\n\t}\n\telse{\n\t\t\tmiscDivPosition = -150;\n\t}\n    misc.style.webkitTransform = 'translateY('+miscDivPosition+'%)'; \n    misc.style.mozTransform    = 'translateY('+miscDivPosition+'%)'; \n    misc.style.transform       = 'translateY('+miscDivPosition+'%)'; \n}\n\t```\n\n[sf-village]\n - Chaining animations via JQuery (Logo, logo scale, and show bg)\n\n ```\n \t\t$(\"#logo\").animate({opacity: 1}).delay(2000).promise().always(function(){\n\t\t\t$(\"#logo\").animate({top: 0, width: '200px', height: '100px'}).delay(200).promise().always(function(){\n\t\t\t\t$(\"#white-cover\").animate({opacity: 0})\n\t\t\t})\n\t\t})\n ```\n \n [sf-res]\n \n- A \"Close everything else\" Animation\n  \n ```\n  \t$menu_condense: function(menu_item){\n\t\t\t//slide non-selected\n\t\t\t_.menuThumbs.filter(function(item){\n\t\t\t\treturn item !== _.menuThumbs[_.menuOptions.indexOf(menu_item)];\n\t\t\t}).forEach(function(element){\n\t\t\t\t$(element).animate({ opacity: 0 }).promise().always(function(){\n\t\t\t\t\t//after fade thumbnails out, slide parent up\n\t\t\t\t\t$(element).parent().slideUp('fast');\n\t\t\t\t});;\n\t\t\t})\n\t}\n\t```\n",
    "# calculator\n\n# Takeaways\n - CSS -> __% vs __px rounded borders.\n - CSS -> Blinking Cursor\n```\n.blinking {\n      animation: blink 1s steps(5, start) infinite;\n      -webkit-animation: blink 1s steps(5, start) infinite;\n}\n    @keyframes blink {\n      to {\n        visibility: hidden;\n      }\n    }\n    @-webkit-keyframes blink {\n      to {\n        visibility: hidden;\n      }\n    }\n ```\n - Math Evaluation Plugin - Parser.js\n - Regex to manipulate input Expression via buttons.\n",
    "# filescanner\n\nClient uploads a file, Server tells client its filesize.\n\n# Takeaways\n\n - How to use ```multer``` to upload a file temporarily to server.\n",
    "# MEAN-basic\n\n#Takeaways\n\n - **This app uses client-side Angular ui.Router (NOT NgRoute) to control controllers and views.\n```\n          == angularApp.js (clientside JS, angular route) ==\n app.config([\n'$stateProvider',\n'$urlRouterProvider',\nfunction($stateProvider, $urlRouterProvider) {\n\n  $stateProvider\n    .state('home', {\n      url: '/home',\n      templateUrl: '/home.html',\n      controller: 'MainCtrl',\n      resolve: {\n        postPromise: ['posts', function(posts){\n          return posts.getAll();\n        }]\n      }\n    })\n    .state('posts', {\n      url: '/posts/{id}',\n      templateUrl: '/posts.html',\n      controller: 'PostsCtrl',\n      resolve: {\n        post: ['$stateParams', 'posts', function($stateParams, posts) {\n          return posts.get($stateParams.id);\n        }]\n      }\n    });\n \n```\n - use of MongoDB's ```.populate``` to get ```post.comments```\n```\n\t=== HTML Template ===\n\n    <script type=\"text/ng-template\" id=\"/posts.html\">\n      <div class=\"page-header\">\n        <h3>\n          <a ng-show=\"post.link\" href=\"{{post.link}}\">\n            {{post.title}}\n          </a>\n          <span ng-hide=\"post.link\">\n            {{post.title}}\n          </span>\n        </h3>\n      </div>\n\n      <div ng-repeat=\"comment in post.comments | orderBy:'-upvotes'\">\n        <span class=\"glyphicon glyphicon-thumbs-up\"\n          ng-click=\"incrementUpvotes(comment)\"></span>\n        {{comment.upvotes}} - by {{comment.author}}\n        <span style=\"font-size:20px; margin-left:10px;\">\n          {{comment.body}}\n        </span>\n      </div>\n          <!-- post template -->\n\n      <form ng-submit=\"addComment()\"\n        style=\"margin-top:30px;\">\n        <h3>Add a new comment</h3>\n\n        <div class=\"form-group\">\n          <input type=\"text\"\n          class=\"form-control\"\n          placeholder=\"Comment\"\n          ng-model=\"body\"></input>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Post</button>\n      </form>\n    </script>\n\n         == angularApp.js (clientside JS, angular service) ==\n\n   o.get = function(id) {\n       return $http.get('/posts/' + id).then(function(res){\n       \t//return post with comments expanded\n         return res.data;\n       });\n     };\n     \n     \n         == index.js (routes file) ==\n/* GET post\n   Query auto-ran on router.param\n */\nrouter.get('/posts/:post', function (req, res) {\n\treq.post.populate('comments', function(err, post) {\n\t\tres.json(post);\n\t});\n});\n```\n - use ```angular.copy(data, $scope.putDataHere)``` instead of ```$scope.putDataHere = data```\n```\n         == angularApp.js (clientside JS, angular service) ==\n  var o = {\n    posts: []\n  };\n//get posts, run by $stateProvider resolve\n   o.getAll = function() {\n       return $http.get('/posts').success(function(data){\n         angular.copy(data, o.posts);\n       });\n     };\n     \n     === HTML Template ===\n       <div ng-repeat=\"post in posts ... (from service)\n```\n\n - using express Router```.param``` with ```Model.findById(id)``` instead if ```req.params.(blah)```. app.param is depreciated in Express 4.11x ->\n \n ```\n         == index.js (routes file) ==\n /*------*/\n/* PARAM */\n/*------*/\n// Runs for all post related actions\nrouter.param('post', function (req, res, next, id) {\n\tvar query = Post.findById(id);\n\n\tquery.exec( function (err, post) {\n\t\tif (err) { return next(err); }\n\t\tif (!post) {\n\t\t\treturn next('Could not find post');\n\t\t}\n\n\t\treq.post = post;\n\t\treturn next();\n\t});\n});\n\n////Example use, note how we can use 'req.comment' in the PUT request.\n\n        == index.js (routes file) ==\nCLIENT\n\n   //upvote comment\n   o.upvoteComment = function(post, comment) {\n       return $http.put('/posts/' + post._id + '/comments/'+ comment._id + '/upvote')\n         .success(function(data){\n           comment.upvotes += 1;\n         });\n     };\n     \n SERVER\n \n/* Upvote a comment */\nrouter.put('/posts/:post/comments/:comment/upvote', function (req, res, next) {\n\treq.comment.upvote( function (err, comment) {\n\t\tif (err) { return next(err); }\n\t\tres.json(comment);\n\t});\n});\n ```\n \n - Methods in Model Objects, being triggered by POST requests.\n \n ```\n        == index.js (routes file) ==\n        /* Upvote a comment */\n        router.put('/posts/:post/comments/:comment/upvote', function (req, res, next) {\n            req.comment.upvote( function (err, comment) {\n                if (err) { return next(err); }\n                res.json(comment);\n            });\n        });\n                \n        == Comments.js ==\n        CommentSchema.methods.upvote = function(cb) {\n          this.upvotes += 1;\n          this.save(cb);\n        };\n ```\n\n - Relations in Model Objects and Default Settings\n \n ```\n   upvotes: {type: Number, default: 0},\n   post: { type: mongoose.Schema.Types.ObjectId, ref: 'Post' }\n ```\n",
    "# loginV3\n\n# Takeaways\n\n - uses passport-local-mongoose for Account model (v4 only uses 'passport-local')\n```\n== account.js ==\n\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\nvar passportLocalMongoose = require('passport-local-mongoose');\n  console.log(\"       MODELS/ACCT.JS\")\nvar Account = new Schema({\n    username: String,\n    password: String\n});\n\nAccount.plugin(passportLocalMongoose);\n\nmodule.exports = mongoose.model('Account', Account);\n\n== routes.js ==\nvar passport = require('passport');\nvar Account = require('../models/account');\nvar router = express.Router();\n/*----------------*/\n/* register NEW USER. */\n/*----------------*/\nrouter.post('/register', function(req, res) {\n    console.log(\"package for register page\")\n    Account.register(new Account({ username : req.body.username }), req.body.password, function(err, account) {\n        if (err) {\n          return res.render(\"register\", {info: \"Sorry. That username already exists. Try again.\"});\n        }\n\n        passport.authenticate('local')(req, res, function () {\n            res.redirect('/');\n        });\n    });\n});\n/*----------------*/\n/* login USER. */\n/*----------------*/\nrouter.post('/login', passport.authenticate('local'), function(req, res) {\n    console.log(\"package for login page\")\n    res.redirect('/');\n});\n\n```\n\n - Mocha tests for testing Account creation == https://github.com/vtange/loginV3/blob/master/test/test.user.js\n - layout.jade == header for Jade template\n \n",
    "# imgsearcher\n\nClient sends keyword, Server performs Bing Search on behalf of Client and returns to Client the results.\n\n# Takeaways\n\n - CSS => Using flexbox to display results in gallery format\n - How to use Bing API with pages and all.\n - Storing recent searches in a server side variable.\n - How to use a Promise with 'Q'. respond for GET and POST request after Promise is resolved\n \n```\n\tvar deferred = Q.defer();\n    request.get(url, {auth: { user: key, password: key} }, function (error, result) {\n\t\t     deferred.resolve(result.body);\n    })\n    \n  \tdeferred.promise.then(function (value) {\n  \t\tvalue = JSON.parse(value);\n  \t\tvar arr = value.d.results;\n  \t\tres.send(arr.slice(0,10));\n  \t});\n```\n",
    "# loginV4\n\n# Takeaways\n\n - Separate Db.config, Passport config, and routes from Server/App.js by making modules of them and running them with app as a parameter.\n \n",
    "# Portfolio\n\n# Takeaways\n\nCSS:\n - Classic, Bootstrapped Header\n - Pure CSS Parallax\n \n ```\n        <div name=\"slide1\" id=\"slide1\" class=\"slide\">\n        </div>\n         \n        <div name=\"slide2\" id=\"slide2\" class=\"slide\">\n        </div>\n        \n          .slide:before {\n            content: \"\";\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            left:0;\n            right:0;\n          }\n          .slide {\n            position: relative;\n            box-sizing: border-box;\n            padding: 25vh 10%;\n            min-height: 100vh;\n            width: 100vw;\n            transform-style: inherit;\n          }\n        \n        #slide1:before {\n            background:\n                /* dark blue */ \n                linear-gradient(\n                  rgba(0, 0, 0, 0.3), \n                  rgba(0, 0, 0, 0.3)\n                ),\n                url(\"https://40.media.tumblr.com/1b916597d3e174399cb7adadddb66ede/tumblr_nt5uk4psl31ud7rr3o1_1280.jpg\");\n            background-repeat: no-repeat;\n            background-size:cover;\n            background-position: center;\n            background-attachment: fixed;\n            transform: translateZ(-1px) scale(1);\n            z-index:-1;\n        }\n          \n        #slide2 {\n            background:url(\"https://41.media.tumblr.com/eb2382a5a4c996cfdab27bc0d1eb51ff/tumblr_nt5umxS1FY1ud7rr3o1_1280.jpg\");\n            background-repeat: no-repeat;\n            background-size:cover;\n            background-position: center;\n            background-attachment: fixed;\n        }\n        \n        \n        \n ```\n",
    "# Portfolio2\n\n# Takeaways\n\nCSS:\n - Improve aliasing of text\n```\ntext-shadow: 1px 1px 2px rgba(255,200,200,0.400);\n```\n - Animation rotateZ, delays and fadein (very slow for images)\n \n",
    "# pomodoro\n\n# Takeaways\n\n - Timekeeping involves seconds (1000 * milliseconds)\n - Use of $interval for timekeeping\n \n```\n ...\n       updateTimer();\n      timerOn = $interval(updateTimer, 1000);\n    } else {\n      $interval.cancel(timerOn);\n      timerOn = false;\n    }\n```\n\n - Time Display conversion function\n\n```\n  function secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n    var s = Math.floor(d % 3600 % 60);\n    return (\n      (h > 0 ? h + \":\" + (m < 10 ? \"0\" : \"\") : \"\") + m + \":\" + (s < 10 ? \"0\" : \"\") + s\n    ); \n  }\n  ```\n  \n - 0% - 100% Progress Bar\n \n```\n       //control progress bar\n      var totalsecs = 60 * $scope.originalSetTime;\n      var percentage = Math.abs((secs / totalsecs) * 100 - 100);\n      //move the box with percentage\n      document.querySelector(\".progress-bar\").style.width = percentage + \"%\";\n```\n\n - Playing Audio\n\n```\n      // Play audio\n      var wav = 'http://www.oringz.com/oringz-uploads/sounds-917-communication-channel.mp3';\n      var audio = new Audio(wav);\n\t\t\taudio.play();\n```\n\n\n",
    "# simon\n\n# Takeaways\nCSS:\n - ng-class to smooth darken background when power is on. (Using opacity on black) (Orig. used in TOS Mapdex)\n \n ```\n  <div id=\"darkness\" class=\"disappear\" data-ng-class=\"{'disappear': !power, 'appear': power}\"></div>\n ```\n - using box-shadow to tint a div which already has a background image.\n \n ```\n  input.color = \"0px 340px rgba(255, 0, 80, 0.3) inset\"\n  SEE BELOW for \"input.color\"\n ```\n - Circular glow button, iPhone-style switch\n - TM symbol and happy/frowny faces.\n \nJS:\n - ng-style use with JSON for generating and animating Xylophone bars:\n \n ```\n    $scope.set_styling = function (input) {\n        if (input.playing) {\n            return { \"height\": input.length, \"box-shadow\": input.color }\n        }\n        else{\n        return { \"height\": input.length }\n        };\n ```\n  - using a box-shadow on an overlayed div to give glow effect. (Used on \"Pip Holder\" elements that align pips)\n ```\n    $scope.backlight = function (input) {\n        if (input.playing) {\n            return { \"box-shadow\": input.light }\n        }\n        else{\n        return {  }\n        };\n ```\n - Sequence:\n ```\n Up Number -> Play Demo -> Listen -> :), Up Number...\n                                  -> :(, Repeat\n ```\n - Block User Action with a <div> that only disappears during Listen Phase.\n ```\n    <div id=\"click-block\" data-ng-if=\"!listening\"></div>\n ```\n - ng-mousedown, mouseup, mouseenter: (Used in Guide-showing, hold down for long glow aesthetic)\n\n ```\n data-ng-mouseenter=\"ShowGuide(bar)\" data-ng-mousedown=\"Play(bar)\" data-ng-mouseleave=\"UnPlay(bar);ShowGuide(bar)\" data-ng-mouseup=\"UnPlay(bar)\"\n ```\n \n \n TODO\n\nwould like to find a way to find and cancel all pending timeouts. \nmaybe use a array of timeouts and assign each timeout to that array?\n\n<strike>Also find a way to preload sounds so they don't lag the first time they're played</strike> Preloading sounds does not solve this problem, but this is how you do it.\n\n```\n    var sounds = [];//preload sounds\n    for (var k=0;k<$scope.instrum.xyphone.length;k++){sounds.push(new Audio($scope.instrum.xyphone[k].tune))};//preload sounds\n    // and then play them off of sounds array\n```\n",
    "# polland\n\n# Takeaways\n\n - CSS/JS -> Sidescrolling\n```\n// we're basically moving the div left and right with stops before everything moves too far left or right\n\t$(function() {\n\t\tvar myPollsPosition = 0;\n\t\tvar otherPollsPosition = 0;\n\t   $(\".user-ctrl-bar\").mousewheel(function(event, delta) {\n\t\t   if(myPollsPosition + delta*100<=0 && myPollsPosition + delta*100>= $(\".content\").outerWidth() - $(\"#myPolls\").outerWidth()-100){\n\t\t\t   myPollsPosition += (delta*100);\n\t\t\t   $(\"#myPolls\").css(\"transform\",\"translateX(\"+myPollsPosition+\"px)\")\n\t\t\t   console.log(myPollsPosition);\n\t\t\t  event.preventDefault();\n\t\t   }\n\t   });\n\t   $(\".polls-viewport\").mousewheel(function(event, delta) {\n\t\t   if(otherPollsPosition + delta*100<=0 && otherPollsPosition + delta*100>= $(\".content\").outerWidth() - $(\"#otherPolls\").outerWidth()-100){\n\t\t\t   otherPollsPosition += (delta*100);\n\t\t\t   $(\"#otherPolls\").css(\"transform\",\"translateX(\"+otherPollsPosition+\"px)\")\n\t\t\t  event.preventDefault();\n\t\t   }\n\t   });\n\t});\n```\n \n\n\n\n - Using ng-init to send JS data from server to client\n\n```\n// .ejs file within HTML\ndata-ng-init=\"package = <%= packagedUser %>;autologUser(package)\"\n\n// route file\n        res.render('index.ejs', {\n\t\t\tpackagedUser : JSON.stringify(req.user)\n```\n\n - Gotcha req.user vs author in relationship must be both toString() to compare. Because they are objects and must be deep compared.\n - Chart.js -> Creating, updating, deleting Charts\n - Vanilla JS method of $(document).ready  ```document.addEventListener(\"DOMContentLoaded\", function() {```\n - /public files directories are dependent on where the template .ejs file is\n\n \n\n```\nhttps://github.com/vtange/polland/commit/6d58224d4209c47b2bed76a8c625029e4bbade85\n```\nMongoDB\n - initDB file to create mock polls and mock users\n - Customizing/making new Models and interacting with them in MongoDB\n - ```.find({})``` and ```.findOne({})``` are async queries.\n \n - Use ```async``` module to ```.waterfall``` connect async in serial fashion\n \n",
    "# Tree Of Savior Monster Map\nA map with monster data inputed in. Made to help orient the Tree of Savior Translation group on What monsters are found where.\n\n\nThis was my first app. Very crude and disorganized code. 'Monstall' isn't even proper JSON. A lot of repeat angularized HTML.\n\n# Major Takeaways:\nCSS:\n 1. Toggling buttons and tabs -> stay lit up without outlines, etc.\n 2. \"X\" for closing pseudoelement (first use) \n\nJS:\n\n 1. Loading JSON Data via HTML\n 2. Tabs, floors, selected zone control.\n 3. Use of Angular Filters to filter Ng-Repeat\n 4. Use of Ng-Switch for picture/icon handling\n 5. Used MonsterDB.monstall.indexOf(monster) instead of $index to track monsters due to issues with non-sequential lists.\n 6. Vertical Delete Button\n\nEDIT MODE\n\n 7. Use of a transparent, Full-screen DIV layer to block clicks outside edited object\n 8. Use of ```angular.copy($scope.MonsterDB.monstall[index], $scope.editedItem);```\n      - copy original to form-controlled 'editedItem' to edit.\n      - reverse to save -> ```angular.copy($scope.editedItem, $scope.MonsterDB.monstall[index]);```\n\nSEARCH MODE\n\n 9. Move info from Controller to Controller via Service\n 10. Angular Filter Array of Objects by 'searched for' object. Basic Name search and attribute searching.\n\nHINDSIGHT:\n\n 1. Used a JSON for Map Data\n 2. More ng-repeat to avoid repeated HTML elements.\n 3. Split Controllers, or just do it in one controller and not have to use a service.\n",
    "# urlshortener\n\nClient sends a url, Server encodes it and gives a encoded URL\n\n# Takeaways\n\n- Using ```hashid``` plugin with strings by converting strings to array of charCodes.\n- Lots of url play\n",
    "# twitch\n\n# Takeaways\n\n - CSS -> Tabs within Boundaries\n - CSS -> Line Height and floats for ```[Avatar] Username     [status]```\n\n\n - filtering upon ng-repeat\n \n ```\n data-ng-repeat=\"user in storage.combinedUsers | filter:sera\" -> 'sera' = ng-model for name search.\n ```\n ```\n data-ng-repeat=\"user in offlineUsers = (storage.combinedUsers | offline)\n ```\n \n- 2x API Search for User info and User Status. -> merged \"User info\" and \"User status\" via 'extend' function.\n  \n  ```\n  //courtesy https://plainjs.com/javascript/utilities/merge-two-javascript-objects-19/\nfunction extend(obj, src) {\n    for (var key in src) {\n        if (src.hasOwnProperty(key)) obj[key] = src[key];\n    }\n    return obj;\n}\n  ...\n          $http.jsonp(baseUrl + profileExt + users[i] + \"?callback=JSON_CALLBACK\").success(function(data1) {//pull profile info\n            $http.jsonp(baseUrl + statusExt + data1.name + \"?callback=JSON_CALLBACK\").success(function(data2) {//then pull status info\n               storage.combinedUsers.push(extend(data1,data2)); \n  ..\n  ```\n  \n  \n",
    "# wikisearch\n\n# Takeaways\n\n 1. Search within a search, due to nature of Wikipedia API\n 2. Use of $watch to check for any input. Used for yellow search preview box.\n\n  ```\n     $scope.$watch(function() { return $scope.wikiThis}, //watch this, NOTE THE COMMA\n            function() {   //do this when ^ changes\n  ```\n  \n 3. CSS animation for text-input field based on $scope.searched.\n\n ```\n    -data-ng-class=\"{'searchr-mid': !searched, 'searchr-up': searched}\"\n ```\n"
]